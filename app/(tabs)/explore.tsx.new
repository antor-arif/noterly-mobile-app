import React, { useState, useEffect } from 'react';
import { StyleSheet, TextInput, View, TouchableOpacity } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { Feather } from '@expo/vector-icons';

import { ThemedView } from '@/components/ThemedView';
import { ThemedText } from '@/components/ThemedText';
import { NoteList } from '@/components/notes/NoteList';
import { useNotes } from '@/context/NotesContext';
import { useThemeColor } from '@/hooks/useThemeColor';

export default function ExploreScreen() {
  const { notes, searchNotes, refreshNotes } = useNotes();
  const [searchQuery, setSearchQuery] = useState('');
  const [showFavorites, setShowFavorites] = useState(false);
  const [loading, setLoading] = useState(false);
  
  const backgroundColor = useThemeColor({ light: '#f8f8f8', dark: '#1c1c1e' }, 'background');
  const textColor = useThemeColor({ light: '#000', dark: '#fff' }, 'text');
  const inputBgColor = useThemeColor({ light: '#fff', dark: '#333' }, 'background');
  const inputBorderColor = useThemeColor({ light: '#ddd', dark: '#444' }, 'background');
  const placeholderColor = useThemeColor({ light: '#999', dark: '#666' }, 'text');
  
  // Handle search input
  useEffect(() => {
    const handleSearch = async () => {
      setLoading(true);
      if (searchQuery.trim() === '') {
        // If search is cleared, reset to all notes
        await refreshNotes();
      } else {
        // Search notes based on query
        await searchNotes(searchQuery);
      }
      setLoading(false);
    };
    
    // Debounce search to avoid too many DB queries
    const timer = setTimeout(() => {
      handleSearch();
    }, 300);
    
    return () => clearTimeout(timer);
  }, [searchQuery, refreshNotes, searchNotes]);
  
  // Handle favorites toggle
  useEffect(() => {
    const fetchNotes = async () => {
      setLoading(true);
      if (showFavorites) {
        await searchNotes("favorite:true");
      } else {
        await refreshNotes();
      }
      setLoading(false);
    };
    
    fetchNotes();
  }, [showFavorites, refreshNotes, searchNotes]);
  
  const handleClearSearch = () => {
    setSearchQuery('');
  };
  
  const toggleFavorites = () => {
    setShowFavorites(!showFavorites);
  };

  return (
    <ThemedView style={[styles.container, { backgroundColor }]}>
      <StatusBar style="auto" />
      
      <ThemedView style={styles.header}>
        <ThemedText type="title">
          {showFavorites ? 'Favorites' : 'Search Notes'}
        </ThemedText>
      </ThemedView>
      
      <View style={styles.searchContainer}>
        <View style={[styles.searchInputContainer, { backgroundColor: inputBgColor, borderColor: inputBorderColor }]}>
          <Feather name="search" size={20} color={placeholderColor} style={styles.searchIcon} />
          <TextInput
            style={[styles.searchInput, { color: textColor }]}
            placeholder="Search by title or content..."
            placeholderTextColor={placeholderColor}
            value={searchQuery}
            onChangeText={setSearchQuery}
          />
          {searchQuery.length > 0 && (
            <TouchableOpacity onPress={handleClearSearch} style={styles.clearButton}>
              <Feather name="x" size={20} color={placeholderColor} />
            </TouchableOpacity>
          )}
        </View>
        
        <TouchableOpacity 
          style={[styles.favoriteButton, showFavorites && styles.activeFavoriteButton]} 
          onPress={toggleFavorites}
        >
          <Feather 
            name="star" 
            size={20} 
            color={showFavorites ? "#fff" : "#FFD700"} 
          />
        </TouchableOpacity>
      </View>
      
      <NoteList
        notes={notes}
        loading={loading}
        onRefresh={showFavorites ? undefined : refreshNotes}
        emptyMessage={
          searchQuery 
            ? `No notes matching "${searchQuery}"` 
            : showFavorites
              ? "No favorite notes yet" 
              : "Your notes will appear here"
        }
      />
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    paddingHorizontal: 16,
    paddingTop: 60,
    paddingBottom: 16,
  },
  searchContainer: {
    flexDirection: 'row',
    paddingHorizontal: 16,
    paddingBottom: 16,
    alignItems: 'center',
  },
  searchInputContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 12,
    height: 46,
  },
  searchIcon: {
    marginRight: 8,
  },
  searchInput: {
    flex: 1,
    height: '100%',
    fontSize: 16,
    padding: 0,
  },
  clearButton: {
    padding: 4,
  },
  favoriteButton: {
    marginLeft: 12,
    width: 46,
    height: 46,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 8,
    backgroundColor: '#f0f0f0',
  },
  activeFavoriteButton: {
    backgroundColor: '#FFD700',
  },
});
